(define (is-empty? bst)
        (null? bst))

(define (make-bst node ls rs)
	(list node ls rs))

(define (get-val bst)
	(car bst))

(define (get-ls bst)
	(cadr bst))

(define (get-rs bst)
	(caddr bst))

(define (search bst val)
	(cond ((is-empty? bst) '())
	      ((= val (get-val bst)) bst)
	      ((< val (get-val bst)) (search (get-ls bst) val))
              (else (search (get-rs bst) val))))

(define (is-descendent? x y bst)
        (cond ((is-empty? bst) #f)
              ((and (is-empty? (search bst x))
                    (is-empty? (search bst y))) #f)
              ((and (= y (get-val bst))
                    (not (is-empty? (search bst x)))) #t)
              ((not (is-empty? (search (search bst y) x))) #t)
              (else #f)))

(define (get-smallest-subtree x y bst)
        (cond ((is-empty? bst) '())
              ((or (= y (get-val bst))
                   (= x (get-val bst))) bst)
              ((and (not (is-empty? (search (get-ls bst) x)))
                    (not (is-empty? (search (get-ls bst) y)))) (get-smallest-subtree x y (get-ls bst)))
              ((and (not (is-empty? (search (get-rs bst) x)))
                    (not (is-empty? (search (get-rs bst) y)))) (get-smallest-subtree x y (get-rs bst)))
              ((and (not (is-descendent? x y bst))
                    (not (is-descendent? y x bst))) bst)))

           
      

;(define bst '(16 (3 (2 () ()) (5 () ()))
                (8 (6 () ()) (9 () ()))))
;(define bst '(89 (56 (25 (13 () ()) ()) (57 () ())) (190 (80 () ()) ())))    
            
